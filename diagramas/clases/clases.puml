@startuml Diagrama de Clases

skinparam classAttributeIconSize 0

title Diagrama de Clases

class Juego {
    +Juego(limitesPorRonda: Puntaje[8], limitesPorTurno: Puntaje[8][5])
    +jugar()
}

class Ronda { 
    -limiteDePuntos: Puntaje
    -limitesDePuntosPorTurno: Puntaje[5]
    +Ronda(limiteDePuntos: Puntaje,limiteDePuntosPorTurno: Puntaje[5])
    +esGanada()
}

class Panel {

}

class Jugador { 
    -puntaje: Puntaje
    -mazo: Mazo
    -mano: ArrayList<Carta>
    +repartirCartas()
}

'--------------------------------------------------------
'class PuntajeJugador {
    
'}
'class Carta {

'}

'class CartaPoker {
'    -puntaje: Puntaje
'    -palo: String
'    +puntajeEsIgual(carta: Carta): boolean
'    +paloEsIgual(carta: Carta): boolean
'    +esInmediatamenteSuperior(carta: Carta): boolean
'    +esInmediatamenteInferior(carta: Carta): boolean
'    +agregarPuntos(puntos: Puntaje)
'    +modificarMultiplicador()
'}

'class Mazo {
'    +repartir(cantidad: int): ArrayList<Carta>
'}

'class ManoPoker {
'    -limite
'    +agregarCarta(Carta carta)
'    +sacarCarta(Carta carta)
'    +evaluar()
'}
'------------------------------------------------------

'class CartaComodin{

'}

'class CartaTarot {

'}



'class CartasDisponibles {
    
'}



/'
 ManoPoker.agregar(Carta carta){

 }


 ManoPoker.evaluar(PuntajeJugador, Comodines){
    var valor_numerico, multiplicador, puntuacion

    for each CartaPoker in CartasPoker{
        valor_numerico = CartaPoker.sumar(valor_numerico);
    }

    for each Comodin in Comodines{
        multiplicador = Comodin.sumar(multiplicador);
    }

    determinarPuntuacionPorMano(CartarPoker);
    puntuacion = PuntuacionPorMano.calcular(valor_numerico, multiplicador);
    PuntaJugador.sumar(puntuacion);
  }
'/

' interfaz, sus hijas implementa el metodo de manera !=
'abstract class PuntuacionPorMano { 
'    +calcular()
'}

'class PuntuacionPorManoEscaleraReal {

'}


Juego *--> Jugador
Juego "1" *--> "8" Ronda
Juego *--> Panel
'Jugador "1" --> "8" Carta
'Jugador "1" *--> "1" Mazo
'Mazo *-left-> "52" Carta
'ManoPoker --> PuntuacionPorMano
'ManoPoker --> "*" CartaPoker
'PuntuacionPorManoEscaleraReal --|> PuntuacionPorMano 

/' 
Posible manera de conseguir la mano?
def evaluate_hand(self):
        """Determine the type of poker hand."""
        rank_counts = self.get_rank_counts()
        values = list(rank_counts.values())
        
        if self.is_flush() and self.is_straight():
            return "Straight Flush"
        elif 4 in values:
            return "Four of a Kind"
        elif 3 in values and 2 in values:
            return "Full House"
        elif self.is_flush():
            return "Flush"
        elif self.is_straight():
            return "Straight"
        elif 3 in values:
            return "Three of a Kind"
        elif values.count(2) == 2:
            return "Two Pair"
        elif 2 in values:
            return "One Pair"
        else:
            return "High Card" '/