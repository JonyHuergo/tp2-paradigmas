@startuml Diagrama de Clases Simplificado

skinparam classAttributeIconSize 0

title Diagrama de Clases Simplificado

class AnalizadorMano {
    - EvaluadorMano evaluadorInicial
    + AnalizadorMano()
    + Mano analizarMano(ArrayList<Carta> cartas)
}

class Carta {
    - String palo
    - int valor
    - Puntaje puntaje
    - int multiplicador
    + Carta(String palo, int valor)
    + int getValor()
    + String getPalo()
    + boolean cartaTieneMismoValor(Carta carta)
    - boolean valorEsIgual(int valorCarta)
    + boolean paloEsIgual(String paloCarta)
    + boolean paloEsIgual(Carta carta)
    + boolean esInmediatamenteSuperior(Carta carta)
    + boolean esInmediatamenteInferior(Carta carta)
    + void modificarMultiplicador(int multiplicador)
    + void agregarPuntos(Puntaje puntos)
    + int actualizarPuntajeTotal(int puntajeTotal)
    + int actualizarMultiplicadorTotal(int multiplicadorTotal)
}

class Juego {
    - Jugador jugador
    - Ronda ronda
    - int cantidadRondas
    - boolean juegoGanado
    + void jugar()
    + void PartidaPerdida()
}

class Jugador {
    - Mazo mazo
    - String nombre
    - ArrayList<Carta> mano
    - ArrayList<Carta> manoElegida
    - ManoPoker manoPoker
    - Puntaje puntaje
    - Puntaje multiplicador
    + Jugador()
    + void repartirCartas(int cantidad)
    + ArrayList<Carta> getCartasEnMano()
    + void elegirCartas(ArrayList<Integer> posicionesCartas)
    + void jugar(ManoPoker manoJugada)
}

class ManoPoker {
    - ArrayList<Carta> cartas
    - PuntuacionPorMano puntuacionPorMano
    - AnalizadorMano analizadorMano
    - Mano tipoDeMano
    + ManoPoker()
    + ManoPoker(ArrayList<Carta> cartas)
    + void agregarCarta(Carta carta)
    + void removerCarta(Carta carta)
    + Puntaje evaluar()
    + String obtenerNombreTipoDeMano()
    + Mano calcularMano()
}

class Mazo {
    - ArrayList<Carta> cartas
    + Mazo()
    + int cantidadDeCartas()
    + ArrayList<Carta> repartir(int cantidad)
    - void inicializarMazo()
}

class Puntaje {
    - int valor
    + Puntaje(int valor)
    + Puntaje sumarCon(Puntaje otroPuntaje)
    + int getValor()
    + boolean esMenorA(Puntaje otroPuntaje)
    + boolean equals(Object obj)
}

class PuntuacionPorMano {
    - int puntajeBase
    - int multiplicadorBase
    + Puntaje calcular(ArrayList<Carta> cartas, Mano mano)
    - void definirTipoDeMano(ArrayList<Carta> cartas, Mano mano)
}

class Ronda {
    - Puntaje limiteDePuntos
    - int turno
    + Ronda(Puntaje limiteDePuntos)
    + void pasarTurno(Puntaje puntajeTotal)
}

abstract class Tarot {
    + void aplicarEfecto(Carta carta)
}

interface EvaluadorMano {
    + evaluar(ArrayList<Carta> cartas): Mano
}

abstract class EvaluadorAbstracto implements EvaluadorMano {
    - EvaluadorMano siguiente
    + void setSiguiente(EvaluadorMano siguiente)
    + Mano evaluar(ArrayList<Carta> cartas)
    + abstract Mano evaluarMano(ArrayList<Carta> cartas)
}

abstract class Mano {
    + String getNombre()
    + int getPuntajeBase()
    + int getMultiplicadorBase()
}

Mazo --> Carta

AnalizadorMano --> EvaluadorMano
AnalizadorMano --> Mano
AnalizadorMano --> Carta

Juego --> Jugador
Juego --> Ronda

Jugador --> ManoPoker

ManoPoker --> Carta
ManoPoker --> AnalizadorMano
ManoPoker --> Mano
ManoPoker --> PuntuacionPorMano

PuntuacionPorMano --> Puntaje
PuntuacionPorMano --> Mano
PuntuacionPorMano --> Carta

Ronda --> Puntaje

Tarot --> Carta

@enduml